


edge_dict =  {
    ((43, 564), (56, 498)): 1,
    ((56, 498), (68, 456)): 1,
    ((68, 456), (118, 423)): 1,
    ((118, 423), (135, 380)): 1,
    ((135, 380), (149, 310)): 1,
    ((149, 310), (193, 257)): 1,
    ((193, 257), (283, 199)): 1,
    ((283, 199), (355, 158)): 1,
    ((355, 158), (428, 112)): 1,
    ((428, 112), (467, 65)): 1,
    ((467, 65), (538, 85)): 1,
    ((538, 85), (632, 54)): 1,
    ((632, 54), (724, 64)): 1,
    ((428, 112), (484, 147)): 1,
    ((484, 147), (561, 132)): 1,
    ((561, 132), (612, 127)): 1,
    ((612, 127), (661, 104)): 1,
    ((283, 199), (303, 136)): 1,
    ((303, 136), (359, 73)): 1,
    ((359, 73), (409, 34)): 1,
    ((409, 34), (468, 23)): 1,
    ((468, 23), (528, 22)): 1,
    ((528, 22), (574, 39)): 1,
    ((574, 39), (655, 20)): 1,
    ((655, 20), (694, 27)): 1,
    ((193, 257), (185, 229)): 1,
    ((185, 229), (211, 158)): 1,
    ((211, 158), (232, 138)): 1,
    ((232, 138), (252, 97)): 1,
    ((252, 97), (286, 60)): 1,
    ((286, 60), (340, 40)): 1,
    ((135, 380), (192, 367)): 1,
    ((192, 367), (277, 322)): 1,
    ((277, 322), (334, 262)): 1,
    ((334, 262), (393, 289)): 1,
    ((393, 289), (408, 253)): 1,
    ((408, 253), (472, 246)): 1,
    ((472, 246), (562, 211)): 1,
    ((562, 211), (646, 183)): 1,
    ((646, 183), (665, 140)): 1,
    ((665, 140), (724, 118)): 1,
    ((283, 199), (339, 212)): 1,
    ((339, 212), (431, 195)): 1,
    ((431, 195), (504, 194)): 1,
    ((504, 194), (580, 168)): 1,
    ((580, 168), (622, 159)): 1,
    ((193, 257), (244, 272)): 1,
    ((244, 272), (311, 237)): 1,
    ((311, 237), (372, 246)): 1,
    ((372, 246), (438, 222)): 1,
    ((135, 380), (112, 360)): 1,
    ((112, 360), (87, 295)): 1,
    ((87, 295), (91, 240)): 1,
    ((91, 240), (115, 181)): 1,
    ((115, 181), (138, 131)): 1,
    ((138, 131), (152, 55)): 1,
    ((152, 55), (205, 41)): 1,
    ((205, 41), (272, 27)): 1,
    ((138, 131), (120, 92)): 1,
    ((120, 92), (107, 50)): 1,
    ((107, 50), (147, 19)): 1,
    ((115, 181), (93, 144)): 1,
    ((93, 144), (73, 112)): 1,
    ((64, 69), (77, 32)): 1,
    ((73, 112), (64, 69)): 1,
    ((87, 295), (48, 227)): 1,
    ((48, 227), (49, 162)): 1,
    ((49, 162), (30, 111)): 1,
    ((115, 181), (155, 159)): 1,
    ((155, 159), (193, 115)): 1,
    ((193, 115), (221, 83)): 1,
    ((87, 295), (129, 260)): 1,
    ((129, 260), (149, 206)): 1,
    ((277, 322), (323, 329)): 1,
    ((323, 329), (389, 325)): 1,
    ((389, 325), (470, 297)): 1,
    ((519, 281), (584, 257)): 1,
    ((584, 257), (638, 280)): 1,
    ((470, 297), (519, 281)): 1,
    ((638, 280), (683, 244)): 1,
    ((683, 244), (696, 192)): 1,
    ((696, 192), (754, 156)): 1,
    ((584, 257), (636, 220)): 1,
    ((636, 220), (687, 162)): 1,
    ((192, 367), (219, 384)): 1,
    ((219, 384), (282, 406)): 1,
    ((282, 406), (356, 381)): 1,
    ((356, 381), (437, 373)): 1,
    ((437, 373), (472, 402)): 1,
    ((472, 402), (541, 360)): 1,
    ((541, 360), (585, 348)): 1,
    ((585, 348), (653, 348)): 1,
    ((653, 348), (711, 305)): 1,
    ((711, 305), (714, 254)): 1,
    ((714, 254), (729, 212)): 1,
    ((118, 423), (154, 445)): 1,
    ((154, 445), (219, 443)): 1,
    ((219, 443), (233, 475)): 1,
    ((233, 475), (303, 456)): 1,
    ((303, 456), (362, 442)): 1,
    ((362, 442), (409, 476)): 1,
    ((409, 476), (452, 444)): 1,
    ((452, 444), (514, 428)): 1,
    ((514, 428), (549, 408)): 1,
    ((549, 408), (607, 386)): 1,
    ((607, 386), (664, 370)): 1,
    ((664, 370), (706, 336)): 1,
    ((706, 336), (733, 300)): 1,
    ((68, 456), (46, 420)): 1,
    ((46, 420), (40, 361)): 1,
    ((40, 361), (36, 310)): 1,
    ((36, 310), (37, 269)): 1,
    ((68, 456), (79, 410)): 1,
    ((79, 410), (76, 361)): 1,
    ((76, 361), (63, 323)): 1,
    ((56, 498), (98, 501)): 1,
    ((98, 501), (146, 519)): 1,
    ((146, 519), (182, 501)): 1,
    ((182, 501), (244, 527)): 1,
    ((310, 524), (375, 523)): 1,
    ((244, 527), (310, 524)): 1,
    ((375, 523), (444, 509)): 1,
    ((444, 509), (473, 482)): 1,
    ((473, 482), (524, 495)): 1,
    ((524, 495), (597, 473)): 1,
    ((597, 473), (633, 439)): 1,
    ((633, 439), (692, 407)): 1,
    ((473, 482), (526, 457)): 1,
    ((526, 457), (575, 443)): 1,
    ((575, 443), (598, 415)): 1,
    ((598, 415), (647, 407)): 1,
    ((244, 527), (322, 488)): 1,
    ((322, 488), (363, 500)): 1,
    ((98, 501), (152, 476)): 1,
    ((152, 476), (199, 484)): 1,
    ((43, 564), (79, 558)): 1,
    ((79, 558), (126, 563)): 1,
    ((126, 563), (213, 548)): 1,
    ((213, 548), (217, 577)): 1,
    ((217, 577), (284, 572)): 1,
    ((284, 572), (315, 560)): 1,
    ((315, 560), (375, 559)): 1,
    ((375, 559), (455, 560)): 1,
    ((455, 560), (484, 542)): 1,
    ((484, 542), (531, 565)): 1,
    ((531, 565), (581, 539)): 1,
    ((581, 539), (619, 523)): 1,
    ((619, 523), (669, 500)): 1,
    ((669, 500), (682, 467)): 1,
    ((682, 467), (713, 437)): 1,
    ((713, 437), (746, 419)): 1,
    ((746, 419), (748, 379)): 1,
    ((748, 379), (752, 329)): 1,
    ((619, 523), (662, 532)): 1,
    ((662, 532), (705, 527)): 1,
    ((705, 527), (730, 501)): 1,
    ((730, 501), (767, 434)): 1,
    ((767, 434), (779, 381)): 1,
    ((531, 565), (598, 574)): 1,
    ((598, 574), (659, 567)): 1,
    ((659, 567), (709, 562)): 1,
    ((709, 562), (760, 543)): 1,
    ((760, 543), (768, 499)): 1,
    ((768, 499), (785, 455)): 1,
    ((484, 542), (548, 511)): 1,
    ((548, 511), (602, 500)): 1,
    ((602, 500), (650, 470)): 1,
    ((650, 470), (680, 436)): 1,
    ((199, 484), (246, 499)): 1,
    ((246, 499), (267, 485)): 1,
    ((267, 485), (321, 465)): 1,
    ((321, 465), (361, 475)): 1,
    ((361, 475), (380, 490)): 1,
    ((380, 490), (402, 495)): 1,
    ((402, 495), (447, 471)): 1,
    ((447, 471), (461, 461)): 1
} 


node_list = [
    (43, 564), (56, 498), (68, 456), (118, 423), (135, 380), (149, 310), (193, 257), (283, 199), (355, 158),
    (428, 112), (467, 65), (538, 85), (632, 54), (724, 64), (484, 147), (561, 132), (612, 127), (661, 104),
    (303, 136), (359, 73), (409, 34), (468, 23), (528, 22), (574, 39), (655, 20), (694, 27), (185, 229), 
    (211, 158), (232, 138), (252, 97), (286, 60), (340, 40), (192, 367), (277, 322), (334, 262), (393, 289),
    (408, 253), (472, 246), (562, 211), (646, 183), (665, 140), (724, 118), (339, 212), (431, 195), (504, 194),
    (580, 168), (622, 159), (244, 272), (311, 237), (372, 246), (438, 222), (112, 360), (87, 295), (91, 240),
    (115, 181), (138, 131), (152, 55),  (205, 41), (272, 27), (120, 92), (107, 50), (147, 19), (93, 144),
    (73, 112),   (64, 69),   (77, 32),  (48, 227), (49, 162), (30, 111), (155, 159), (193, 115), (221, 83),
    (129, 260), (149, 206), (323, 329), (389, 325), (470, 297), (519, 281), (584, 257), (638, 280), (683, 244),
    (696, 192), (754, 156), (636, 220), (687, 162), (219, 384), (282, 406), (356, 381), (437, 373), (472, 402),
    (541, 360), (585, 348), (653, 348), (711, 305), (714, 254), (729, 212), (154, 445), (219, 443), (233, 475),
    (303, 456), (362, 442), (409, 476), (452, 444), (514, 428), (549, 408), (607, 386), (664, 370), (706, 336),
    (733, 300), (46, 420), (40, 361), (36, 310), (37, 269), (79, 410), (76, 361), (63, 323), (98, 501), 
    (146, 519), (182, 501), (244, 527), (310, 524), (375, 523), (444, 509), (473, 482), (524, 495), (597, 473),
    (633, 439), (692, 407), (526, 457), (575, 443), (598, 415), (647, 407), (322, 488), (363, 500), (152, 476), 
    (199, 484), (79, 558), (126, 563), (213, 548), (217, 577), (284, 572), (315, 560), (375, 559), (455, 560), 
    (484, 542), (531, 565), (581, 539), (619, 523), (669, 500), (682, 467), (713, 437), (746, 419), (748, 379),
    (752, 329), (662, 532), (705, 527), (730, 501), (767, 434), (779, 381), (598, 574), (659, 567), (709, 562),
    (760, 543), (768, 499), (785, 455), (548, 511), (602, 500), (650, 470), (680, 436), (246, 499), (267, 485),
    (321, 465), (361, 475), (380, 490), (402, 495), (447, 471), (461, 461)
]





node_dict ={}                                                                   # convert position to node's index

for index,node in enumerate(node_list):

    node_dict[node] = index


graph = []                                                                      # create graph
for x in range(len(node_list)):
    graph.append([])

for node1,node2 in edge_dict:                                               

    graph[node_dict[node1]].append(node_dict[node2])                            # fill graph
    graph[node_dict[node2]].append(node_dict[node1])



import pygame,time


pygame.init()


screen_height = 700
screnn_width = 1000
screen = pygame.display.set_mode((screnn_width,screen_height))


for node1,node2 in edge_dict:                                                   # draw edges
    pygame.draw.line(screen,(255,255,255), node1, node2, 2)

for node in node_list:                                                          # draw nodes
    pygame.draw.circle(screen,  (0,0,255), node, 5)


font = pygame.font.Font('freesansbold.ttf',15)


pygame.draw.circle(screen,  (255,255,255), (850,150) , 10)
pygame.draw.circle(screen,(0,255,0),(850,150),5)
text = font.render("seen (visto)",True,(0,255,0))                               # informative node       
screen.blit(text,text.get_rect(center = (925,150)))

pygame.draw.circle(screen,(0,255,0),(850,175),10)
text = font.render("current (atual)",True,(0,255,0))                            # informative node   
screen.blit(text,text.get_rect(center = (925,175)))

pygame.draw.circle(screen,(255,0,0), (850,200),10)
text = font.render("memory stack",True,(255,0,0))
screen.blit(text,text.get_rect(center = (915,200)))                             # informative node   
text = font.render("(pilha de processamento)",True,(255,0,0))
screen.blit(text,text.get_rect(center = (910,220)))



pygame.display.update()                                                         # display graph before algorithm


seen = list(False for x in range(len(graph)))                                   # haven't seen anyone yet


algoritmo = int(input("algoritmo: bfs(1), dfs(2): "))



if algoritmo == 1:
    
    from data_struct.queue import queue
    from algorithms.bfs import bfs

    process_list = queue()
    source = 0
    process_list.insert(source)

    bfs(screen, node_list,seen,graph,process_list,source)


if algoritmo == 2:

    from data_struct.stack import stack
    from algorithms.dfs import dfs

    process_stack = stack()
    source = 0
    process_stack.insert(source)

    dfs(screen, node_list,seen,graph,process_stack,source)  
    