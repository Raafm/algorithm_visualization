edge_dict =  {
    ((18, 26), (29, 77)): 1,
    ((29, 77), (19, 119)): 1,
    ((19, 119), (33, 166)): 1,
    ((33, 166), (66, 226)): 1,
    ((66, 226), (33, 300)): 1,
    ((33, 300), (68, 341)): 1,
    ((68, 341), (55, 387)): 1,
    ((55, 387), (52, 448)): 1,
    ((52, 448), (95, 483)): 1,
    ((95, 483), (61, 545)): 1,
    ((61, 545), (96, 566)): 1,
    ((96, 566), (156, 580)): 1,
    ((156, 580), (194, 551)): 1,
    ((194, 551), (232, 571)): 1,
    ((232, 571), (297, 546)): 1,
    ((297, 546), (367, 566)): 1,
    ((367, 566), (399, 534)): 1,
    ((399, 534), (435, 582)): 1,
    ((435, 582), (475, 539)): 1,
    ((475, 539), (528, 545)): 1,
    ((528, 545), (598, 550)): 1,
    ((598, 550), (620, 575)): 1,
    ((620, 575), (661, 542)): 1,
    ((661, 542), (733, 564)): 1,
    ((661, 542), (697, 496)): 1,
    ((697, 496), (742, 467)): 1,
    ((742, 467), (710, 415)): 1,
    ((710, 415), (742, 359)): 1,
    ((742, 359), (728, 312)): 1,
    ((728, 312), (757, 260)): 1,
    ((757, 260), (729, 229)): 1,
    ((729, 229), (752, 176)): 1,
    ((752, 176), (715, 155)): 1,
    ((715, 155), (724, 112)): 1,
    ((724, 112), (729, 77)): 1,
    ((729, 77), (722, 38)): 1,
    ((722, 38), (672, 36)): 1,
    ((672, 36), (610, 37)): 1,
    ((610, 37), (554, 60)): 1,
    ((554, 60), (463, 49)): 1,
    ((463, 49), (334, 43)): 1,
    ((334, 43), (267, 64)): 1,
    ((334, 43), (207, 44)): 1,
    ((207, 44), (138, 49)): 1,
    ((207, 44), (267, 64)): 1,
    ((138, 49), (85, 20)): 1,
    ((18, 26), (85, 20)): 1,
    ((85, 20), (76, 67)): 1,
    ((76, 67), (142, 91)): 1,
    ((142, 91), (177, 90)): 1,
    ((177, 90), (214, 114)): 1,
    ((214, 114), (276, 103)): 1,
    ((276, 103), (326, 111)): 1,
    ((326, 111), (368, 118)): 1,
    ((368, 118), (430, 99)): 1,
    ((430, 99), (521, 102)): 1,
    ((521, 102), (526, 135)): 1,
    ((526, 135), (593, 161)): 1,
    ((593, 161), (607, 201)): 1,
    ((607, 201), (655, 229)): 1,
    ((655, 229), (633, 271)): 1,
    ((633, 271), (660, 313)): 1,
    ((660, 313), (655, 360)): 1,
    ((655, 360), (647, 396)): 1,
    ((647, 396), (644, 448)): 1,
    ((697, 496), (644, 448)): 1,
    ((742, 467), (733, 564)): 1,
    ((142, 91), (137, 125)): 1,
    ((137, 125), (160, 168)): 1,
    ((160, 168), (198, 169)): 1,
    ((198, 169), (250, 178)): 1,
    ((250, 178), (268, 215)): 1,
    ((268, 215), (305, 204)): 1,
    ((305, 204), (357, 208)): 1,
    ((357, 208), (381, 244)): 1,
    ((381, 244), (427, 243)): 1,
    ((427, 243), (475, 265)): 1,
    ((475, 265), (512, 298)): 1,
    ((512, 298), (548, 351)): 1,
    ((548, 351), (595, 381)): 1,
    ((644, 448), (595, 381)): 1,
    ((268, 215), (269, 261)): 1,
    ((269, 261), (311, 290)): 1,
    ((311, 290), (353, 303)): 1,
    ((353, 303), (407, 337)): 1,
    ((407, 337), (396, 377)): 1,
    ((396, 377), (444, 399)): 1,
    ((444, 399), (507, 427)): 1,
    ((507, 427), (543, 408)): 1,
    ((543, 408), (588, 460)): 1,
    ((588, 460), (596, 503)): 1,
    ((661, 542), (596, 503)): 1,
    ((66, 226), (104, 258)): 1,
    ((19, 119), (89, 162)): 1,
    ((66, 226), (89, 162)): 1,
    ((104, 258), (89, 162)): 1,
    ((89, 162), (160, 288)): 1,
    ((160, 288), (231, 312)): 1,
    ((231, 312), (262, 357)): 1,
    ((262, 357), (274, 394)): 1,
    ((274, 394), (312, 413)): 1,
    ((312, 413), (357, 467)): 1,
    ((357, 467), (413, 456)): 1,
    ((413, 456), (464, 477)): 1,
    ((464, 477), (511, 487)): 1,
    ((528, 545), (511, 487)): 1,
    ((68, 341), (113, 394)): 1,
    ((113, 394), (153, 421)): 1,
    ((153, 421), (224, 440)): 1,
    ((224, 440), (251, 491)): 1,
    ((399, 534), (251, 491)): 1,
    ((33, 300), (120, 319)): 1,
    ((120, 319), (193, 368)): 1,
    ((274, 394), (193, 368)): 1,
    ((104, 258), (160, 288)): 1,
    ((231, 312), (318, 342)): 1,
    ((353, 303), (318, 342)): 1,
    ((413, 456), (318, 342)): 1,
    ((413, 456), (507, 427)): 1,
    ((407, 337), (475, 344)): 1,
    ((548, 351), (475, 344)): 1,
    ((357, 208), (425, 192)): 1,
    ((425, 192), (482, 214)): 1,
    ((482, 214), (532, 257)): 1,
    ((532, 257), (590, 308)): 1,
    ((425, 192), (522, 185)): 1,
    ((522, 185), (589, 246)): 1,
    ((633, 271), (589, 246)): 1,
    ((595, 381), (590, 308)): 1,
    ((357, 208), (307, 158)): 1,
    ((250, 178), (307, 158)): 1,
    ((307, 158), (392, 152)): 1,
    ((392, 152), (469, 143)): 1,
    ((522, 185), (469, 143)): 1,
    ((521, 102), (622, 85)): 1,
    ((622, 85), (656, 163)): 1,
    ((326, 111), (388, 68)): 1,
    ((430, 99), (388, 68)): 1,
    ((368, 118), (388, 68)): 1
}
    


node_list = [   
    (18, 26),   (29, 77),   (19, 119),  (33, 166),  (66, 226),  (33, 300),  (68, 341),  (55, 387),  (52, 448),  (95, 483),
    (61, 545),  (96, 566),  (156, 580), (194, 551), (232, 571), (297, 546), (367, 566), (399, 534), (435, 582), (475, 539), 
    (528, 545), (598, 550), (620, 575), (661, 542), (733, 564), (697, 496), (742, 467), (710, 415), (742, 359), (728, 312), 
    (757, 260), (729, 229), (752, 176), (715, 155), (724, 112), (729, 77),  (722, 38),  (672, 36),  (610, 37),   (554, 60), (463, 49),
    (334, 43),  (267, 64),  (207, 44),  (138, 49),  (85, 20),   (76, 67),   (142, 91),  (177, 90),  (214, 114), (276, 103), (326, 111), 
    (368, 118), (430, 99),  (521, 102), (526, 135), (593, 161), (607, 201), (655, 229), (633, 271), (660, 313), (655, 360), (647, 396),
    (644, 448), (137, 125), (160, 168), (198, 169), (250, 178), (268, 215), (305, 204), (357, 208), (381, 244), (427, 243),
    (475, 265), (512, 298), (548, 351), (595, 381), (269, 261), (311, 290), (353, 303), (407, 337), (396, 377), (444, 399), 
    (507, 427), (543, 408), (588, 460), (596, 503), (104, 258), (89, 162),  (160, 288), (231, 312), (262, 357), (274, 394),
    (312, 413), (357, 467), (413, 456), (464, 477), (511, 487), (113, 394), (153, 421), (224, 440), (251, 491), (120, 319),
    (193, 368), (318, 342), (475, 344), (425, 192), (482, 214), (532, 257), (590, 308), (522, 185), (589, 246), (307, 158),
    (392, 152), (469, 143), (622, 85),  (656, 163), (388, 68)
]

#node_dict ={}
#
#for index,node in enumerate(node_list):
#
#    node_dict[node] = index
#
#
#graph = []
#for x in range(len(node_list)):
#    graph.append([])
#
#for node1,node2 in edge_dict:
#
#    graph[node_dict[node1]].append(node_dict[node2])
#    graph[node_dict[node2]].append(node_dict[node1])
#
#print(graph)

graph = [
    [1, 45],
    [0, 2],
    [1, 3, 88],
    [2, 4],
    [3, 5, 87, 88],
    [4, 6, 102],
    [5, 7, 98],
    [6, 8],
    [7, 9],
    [8, 10],
    [9, 11],
    [10, 12],
    [11, 13],
    [12, 14],
    [13, 15],
    [14, 16],
    [15, 17],
    [16, 18, 101],
    [17, 19],
    [18, 20],
    [19,21, 97],
    [20, 22],
    [21, 23],
    [22, 24, 25, 86],
    [23, 26],
    [23, 26, 63],
    [25, 27, 24],
    [26, 28],
    [27, 29],
    [28, 30],
    [29, 31],
    [30, 32],
    [31, 33],
    [32, 34],
    [33, 35],
    [34, 36],
    [35, 37],
    [36, 38],
    [37, 39],
    [38, 40],
    [39, 41],
    [40, 42, 43],
    [41, 43],
    [41, 44, 42],
    [43, 45],
    [44, 0, 46],
    [45, 47],
    [46, 48, 64],
    [47, 49],
    [48, 50],
    [49, 51],
    [50, 52, 117],
    [51, 53, 117],
    [52, 54, 117],
    [53, 55, 115],
    [54, 56],
    [55, 57],
    [56, 58],
    [57, 59],
    [58, 60, 111],
    [59, 61],
    [60, 62],
    [61, 63],
    [62, 25, 76],
    [47, 65],
    [64, 66],
    [65, 67],
    [66, 68, 112],
    [67, 69, 77],
    [68, 70],
    [69, 71, 106, 112],
    [70, 72],
    [71, 73],
    [72, 74],
    [73, 75],
    [74, 76, 105],
    [75, 63, 109],
    [68, 78],
    [77, 79],
    [78, 80, 104],
    [79, 81, 105],
    [80, 82],
    [81, 83],
    [82, 84, 95],
    [83, 85],
    [84, 86],
    [85, 23],
    [4, 88, 89],
    [2, 4, 87, 89],
    [88, 90, 87],
    [89, 91, 104],
    [90, 92],
    [91, 93, 103],
    [92, 94],
    [93, 95],
    [94, 96, 104, 83],
    [95, 97],
    [96, 20],
    [6, 99],
    [98, 100],
    [99, 101],
    [100, 17],
    [5, 103],
    [102, 92],
    [90, 79, 95],
    [80, 75],
    [70, 107, 110],
    [106, 108],
    [107, 109],
    [108, 76],
    [106, 111, 114],
    [110, 59],
    [70, 67, 113],
    [112, 114],
    [113, 110],
    [54, 116],
    [115],
    [51, 53, 52]
]

from data_struct.stack import stack
import pygame,time

pygame.init()

number_color = (255, 0, 255)  
number_size = 10
screen_height = 700
screnn_width = 1000
screen = pygame.display.set_mode((screnn_width,screen_height))


for node1,node2 in edge_dict:
    pygame.draw.line(screen,(255,255,255), node1, node2, 2)

for node in node_list:
    pygame.draw.circle(screen,  (0,0,255), node, 5)


pygame.display.update()


seen = list(False for x in range(len(graph)))

process_stack = stack()
source = int(input("source: "))
process_stack.insert(source)

time.sleep(2)

current = 0
while True :
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()                   #exit pygame,
            quit()                          #exit() program

    if process_stack.not_empty(): 

        
        pygame.draw.circle(screen,  (0,0,0), node_list[current] , 9)
        pygame.draw.circle(screen,  (0,255,0), node_list[current] , 5)

        current = process_stack.pop()
        seen[current] = True

        pygame.draw.circle(screen,  (0,255,0), node_list[current] , 9)

        for neighbour in graph[current]:
            if seen[neighbour]:
                continue
            else:
                pygame.draw.circle(screen,  (255,255,0), node_list[neighbour] , 5)
                process_stack.insert(neighbour)


    pygame.display.update()
    time.sleep(0.25)
       