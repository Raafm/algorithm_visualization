
edge_dict =  {
    ((20, 26), (21, 93)): 1,
    ((21, 93), (35, 173)): 1,
    ((35, 173), (74, 215)): 1,
    ((74, 215), (136, 279)): 1,
    ((136, 279), (131, 360)): 1,
    ((131, 360), (204, 409)): 1,
    ((204, 409), (257, 422)): 1,
    ((257, 422), (195, 466)): 1,
    ((195, 466), (226, 506)): 1,
    ((226, 506), (326, 515)): 1,
    ((326, 515), (349, 467)): 1,
    ((349, 467), (371, 501)): 1,
    ((371, 501), (420, 547)): 1,
    ((420, 547), (461, 505)): 1,
    ((461, 505), (512, 547)): 1,
    ((512, 547), (542, 518)): 1,
    ((542, 518), (567, 502)): 1,
    ((567, 502), (570, 449)): 1,
    ((570, 449), (593, 462)): 1,
    ((593, 462), (631, 490)): 1,
    ((631, 490), (630, 524)): 1,
    ((630, 524), (638, 555)): 1,
    ((638, 555), (673, 561)): 1,
    ((570, 449), (605, 396)): 1,
    ((605, 396), (666, 404)): 1,
    ((666, 404), (722, 424)): 1,
    ((722, 424), (718, 484)): 1,
    ((718, 484), (711, 531)): 1,
    ((711, 531), (732, 555)): 1,
    ((673, 561), (732, 555)): 1,
    ((349, 467), (381, 420)): 1,
    ((381, 420), (421, 400)): 1,
    ((421, 400), (465, 354)): 1,
    ((465, 354), (502, 330)): 1,
    ((502, 330), (535, 370)): 1,
    ((535, 370), (581, 356)): 1,
    ((581, 356), (599, 396)): 1,
    ((465, 354), (411, 272)): 1,
    ((411, 272), (473, 228)): 1,
    ((473, 228), (612, 238)): 1,
    ((612, 238), (672, 262)): 1,
    ((672, 262), (670, 320)): 1,
    ((670, 320), (694, 370)): 1,
    ((694, 370), (727, 417)): 1,
    ((20, 26), (94, 35)): 1,
    ((94, 35), (95, 75)): 1,
    ((95, 75), (147, 45)): 1,
    ((147, 45), (231, 35)): 1,
    ((231, 35), (304, 64)): 1,
    ((304, 64), (378, 86)): 1,
    ((378, 86), (406, 44)): 1,
    ((406, 44), (447, 80)): 1,
    ((447, 80), (460, 122)):  1,
    ((460, 122), (485, 164)): 1,
    ((485, 164), (529, 176)): 1,
    ((529, 176), (599, 164)): 1,
    ((599, 164), (667, 233)): 1,
    ((667, 233), (718, 280)): 1,
    ((718, 280), (737, 330)): 1,
    ((737, 330), (737, 387)): 1,
    ((737, 387), (737, 452)): 1,
    ((737, 452), (747, 493)): 1,
    ((747, 493), (744, 536)): 1,
    ((744, 536), (736, 557)): 1,
    ((95, 75), (140, 121)):   1,
    ((140, 121), (139, 157)): 1,
    ((139, 157), (154, 206)): 1,
    ((154, 206), (215, 199)): 1,
    ((215, 199), (221, 242)): 1,
    ((221, 242), (224, 291)): 1,
    ((224, 291), (273, 336)): 1,
    ((273, 336), (315, 296)): 1,
    ((315, 296), (360, 283)): 1,
    ((360, 283), (409, 274)): 1,
    ((231, 35), (240, 73)):   1,
    ((240, 73), (259, 158)):  1,
    ((259, 158), (336, 171)): 1,
    ((336, 171), (306, 226)): 1,
    ((306, 226), (404, 196)): 1,
    ((404, 196), (433, 212)): 1,
    ((433, 212), (468, 227)): 1,
    ((460, 122), (530, 96)):  1,
    ((530, 96), (601, 96)):   1,
    ((601, 96), (668, 141)):  1,
    ((668, 141), (729, 238)): 1,
    ((729, 238), (721, 279)): 1
    }



node_list = [
    (20, 26),    (21, 93),   (35, 173), (74, 215), (136, 279), (131, 360), (204, 409),  (257, 422), (195, 466), (226, 506), 
    (326, 515), (349, 467), (371, 501), (420, 547), (461, 505), (512, 547), (542, 518), (567, 502), (570, 449), (593, 462), (631, 490), 
    (630, 524), (638, 555), (673, 561), (605, 396), (666, 404), (722, 424), (718, 484), (711, 531), (732, 555), (381, 420), (421, 400),
    (465, 354), (502, 330), (535, 370), (581, 356), (599, 396), (411, 272), (473, 228), (612, 238), (672, 262), (670, 320), (694, 370),
    (727, 417), (94, 35),    (95, 75),   (147, 45), (231, 35),  (304, 64),   (378, 86), (406, 44),  (447, 80), (460, 122), 
    (485, 164), (529, 176), (599, 164), (667, 233), (718, 280), (737, 330), (737, 387), (737, 452), (747, 493), (744, 536), (736, 557),
    (140, 121), (139, 157), (154, 206), (215, 199), (221, 242), (224, 291), (273, 336), (315, 296), (360, 283), (409, 274), (240, 73),
    (259, 158), (336, 171), (306, 226), (404, 196), (433, 212), (468, 227), (530, 96),  (601, 96),  (668, 141), (729, 238), (721, 279)
]

# node_dict ={}
# 
# for index,node in enumerate(node_list):
# 
#     node_dict[node] = index
# 
# 
# graph = []
# for x in range(len(node_list)):
#     graph.append([])
# 
# for node1,node2 in edge_dict:
# 
#     graph[node_dict[node1]].append(node_dict[node2])
#     graph[node_dict[node2]].append(node_dict[node1])
# 
# print(graph)

graph = [
    [1, 44], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 10], [9, 11],
    [10, 12, 30], [11, 13], [12, 14], [13, 15], [14, 16], [15, 17], [16, 18], [17, 19, 24],
    [18, 20], [19, 21], [20, 22], [21, 23], [22, 29], [18, 25], [24, 26], [25, 27], [26, 28],
    [27, 29], [28, 23], [11, 31], [30, 32], [31, 33, 37], [32, 34], [33, 35], [34, 36], [35],
    [32, 38], [37, 39], [38, 40], [39, 41], [40, 42], [41, 43], [42], 
    [0, 45], [44, 46, 64], [45, 47], [46, 48, 74], [47, 49], [48, 50], [49, 51],
    [50, 52], [51, 53, 81], [52, 54], [53, 55], [54, 56], [55, 57], [56, 58],
    [57, 59], [58, 60], [59, 61], [60, 62], [61, 63], [62], [45, 65], [64, 66],
    [65, 67], [66, 68], [67, 69], [68, 70], [69, 71], [70, 72], [71, 73], [72],
    [47, 75], [74, 76], [75, 77], [76, 78], [77, 79], [78, 80], [79], [52, 82],
    [81, 83], [82, 84], [83, 85], [84]
]


from data_struct.stack import stack
import pygame,time

pygame.init()

number_color = (255, 0, 255)  
number_size = 10
screen_height = 700
screnn_width = 1000
screen = pygame.display.set_mode((screnn_width,screen_height))

seen = list(False for x in range(len(graph)))

process_stack = stack()
source = int(input("source: "))
process_stack.insert(source)


for node1,node2 in edge_dict:
    pygame.draw.line(screen,(255,255,255), node1, node2, 2)

for node in node_list:
    pygame.draw.circle(screen,  (0,0,255), node, 5)

pygame.display.update()
time.sleep(0.5)

while True :
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()                   #exit pygame,
            quit()                          #exit() program

    if process_stack.not_empty(): 

        current = process_stack.pop()
        seen[current] = True

        pygame.draw.circle(screen,  (0,255,0), node_list[current] , 5)

        for neighbour in graph[current]:
            if seen[neighbour]:
                continue
            else:
                process_stack.insert(neighbour)


    pygame.display.update()
    time.sleep(0.5)
       